isEmpty(DTK_BUILD): error("Please load(dtk_build) first!")

defineTest(dtkBuildMultiVersion) {
    VERSION_NUMBER = $$1
    isEmpty(VERSION_NUMBER): error("Please input the version number.")
    MODULE_NAME = $${join(MODULE_NAME, "", "", $$VERSION_NUMBER)}
    # 写入cmake配置文件
    !win*: {
    MODULE_DEPENDS=$$find(QT, dtk*)
    CMAKE_MODULE_DEPENDS=$$replace(MODULE_DEPENDS,"dtk","")
    CMAKE_MODULE=Dtk$$MODULE_NAME
    WORK_DIR=$$_PRO_FILE_PWD_
    message("config cmake module: $$CMAKE_MODULE")
    LINK_LIBRARIES = ""
    for(MODULE_DEPEND, CMAKE_MODULE_DEPENDS) {
        MODULE_DEPEND=$$capitalizingString($$MODULE_DEPEND)
        MULTI_CMAKE_CONTENT += "find_package(Dtk REQUIRED $$MODULE_DEPEND)"
        LINK_LIBRARIES += " ${Dtk$${MODULE_DEPEND}_LIBRARIES}"
    }
    CMAKE_MODULE_INCLUDE_DIR=$$upper($${CMAKE_MODULE})_INCLUDE_DIR
    INC_DIR = $$replace(INCLUDE_INSTALL_DIR, "/", "/")
    CMAKE_MODULE_TOO_DIR=$$upper($${CMAKE_MODULE})_TOOL_DIR
    TOOL_DIR = $$TOOL_INSTALL_DIR
    MULTI_CMAKE_CONTENT += "set($${CMAKE_MODULE_INCLUDE_DIR} $${INC_DIR})"
    MULTI_CMAKE_CONTENT += "set($${CMAKE_MODULE_TOO_DIR} $${TOOL_DIR})"
    MULTI_CMAKE_CONTENT += "set($${CMAKE_MODULE}_LIBRARIES $$TARGET$$LINK_LIBRARIES)"
    MULTI_CMAKE_CONTENT += "include_directories(\"${"$${CMAKE_MODULE_INCLUDE_DIR}"}\")"
    CMAKE_DIR=$$WORK_DIR/../cmake/$${CMAKE_MODULE}
    CMAKE_PATH=$$CMAKE_DIR/$${CMAKE_MODULE}Config.cmake
    mkpath($$CMAKE_DIR)
    message("write cmake file to $$CMAKE_PATH")
    write_file($$CMAKE_PATH, MULTI_CMAKE_CONTENT) | error("Aborting.")
    }

    # 写入qmake配置文件
    DTK_MODULE_NAME = $${join(DTK_MODULE_NAME, "", "", $$VERSION_NUMBER)}
    # -----------------------
    # Config Qt module
    SRC_MODULE_ID = $$MODULE_ID
    MODULE_ID=$$DTK_MODULE_NAME
    mod_inst_pfx=$$_PRO_FILE_PWD_
    MODULE_PRI = $$mod_inst_pfx/qt_lib_$${MODULE_ID}.pri
    module_libs = $$LIB_INSTALL_DIR
    module_tools = $$TOOL_INSTALL_DIR
    MODULE_INCLUDES = $$INCLUDE_INSTALL_DIR
    MODULE_DEPENDS=$$find(QT, dtk*)
    message("config qt module: $$MODULE_ID")
    message("write $$MODULE_PRI to: $$mod_inst_pfx")
    internal_module: \
        MODULE_DEPENDS = $$replace(QT, -private$, _private)
    else: \
        MODULE_DEPENDS = $$replace(QT, -private$, )
    MODULE_DEPENDS = $$unique(MODULE_DEPENDS)
    contains(MODULE_DEPENDS, $$MODULE): \
        error("$$MODULE_ID depends on itself.")
    # Create a module .pri file
    module_libs=$$LIB_INSTALL_DIR
    isEmpty(module_libs) {
    host_build: \
        module_libs = "\$\$QT_MODULE_HOST_LIB_BASE"
    else: \
        module_libs = "\$\$QT_MODULE_LIB_BASE"
    }
    # In addition to the library's private deps, the private module's deps
    # are logically runtime deps of the public module.
    runtime_deps = $$QT_PRIVATE $$QT_FOR_PRIVATE
    !isEmpty(runtime_deps): \
        module_rundep = "QT.$${MODULE_ID}.run_depends = $$replace(runtime_deps, -private$, _private)"
    else: \
        module_rundep =
    module_build_type = v2
    static: \
        module_build_type += staticlib
    lib_bundle {
        module_build_type += lib_bundle
        MODULE_FRAMEWORKS = " \$\$QT_MODULE_LIB_BASE"
    }
    internal_module: \
        module_build_type += internal_module
    ltcg: \
        module_build_type += ltcg
    module_module =
    !equals(TEMPLATE, aux) {
        module_module = $$SRC_MODULE_ID$$QT_LIBINFIX
        !lib_bundle: module_module ~= s,^Qt,Qt$$QT_MAJOR_VERSION,
    }
    !isEmpty(MODULE_CONFIG): \
        module_config = "QT.$${MODULE_ID}.CONFIG = $$MODULE_CONFIG"
    else: \
        module_config =
    !isEmpty(MODULE_PLUGIN_TYPES): \
        module_plugtypes = "QT.$${MODULE_ID}.plugin_types = $$replace(MODULE_PLUGIN_TYPES, /.*$, )"
    else: \
        module_plugtypes =
    !isEmpty(MODULE_MASTER_HEADER): \
        module_master = "QT.$${MODULE_ID}.master_header = $$MODULE_MASTER_HEADER"
    else: \
        module_master =
    MULTI_MODULE_PRI_CONT += \
        "QT.$${MODULE_ID}.VERSION = $${VERSION}" \
        "QT.$${MODULE_ID}.MAJOR_VERSION = $${VER_MAJ}" \
        "QT.$${MODULE_ID}.MINOR_VERSION = $${VER_MIN}" \
        "QT.$${MODULE_ID}.PATCH_VERSION = $${VER_PAT}" \
        "" \
        "QT.$${MODULE_ID}.name = $${MODULE_ID}" \
        "QT.$${MODULE_ID}.module = $$module_module" \
        "QT.$${MODULE_ID}.tools = $$module_tools" \
        "QT.$${MODULE_ID}.libs = $$module_libs" \
        $$module_master \
        "QT.$${MODULE_ID}.includes = $$MODULE_INCLUDES" \
        "QT.$${MODULE_ID}.frameworks =$$MODULE_FRAMEWORKS"
    MULTI_MODULE_PRI_CONT += \
        "QT.$${MODULE_ID}.depends =$$join(MODULE_DEPENDS, " ", " ")" \
        $$module_rundep \
        "QT.$${MODULE_ID}.module_config =$$join(module_build_type, " ", " ")" \
        $$module_config \
        "QT.$${MODULE_ID}.DEFINES = $$val_escape(MODULE_DEFINES)" \
        "" \
        "QT_MODULES += $$MODULE"

    write_file($$MODULE_PRI, MULTI_MODULE_PRI_CONT)|error("Aborting.")

    # 手动写入多版本下的PKG-CONFIG配置文件
    MULTI_PKG_CONTENT += \
        "prefix=$${PREFIX}" \
        "exec_prefix=\$\{prefix\}" \
        "libdir=$$replace(LIB_INSTALL_DIR, $${PREFIX}, \$\{prefix\})" \
        "includedir=$$replace(includes.path, $${PREFIX}, \$\{prefix\})" \
        " " \
        " " \
        "Name: $$upper($${MODULE_ID})" \
        "Description: Deepin Tool Kit $${MODULE_ID} header files" \
        "Version: $${VERSION}" \
        "Libs: -l$${SRC_MODULE_ID}" \
        "Cflags: -I\$\{includedir\}"

    !isEmpty(PKG_MODULE_DEPENDS) {
        MULTI_PKG_CONTENT += "Requires: $$join(PKG_MODULE_DEPENDS, ", ")"
    }

    PKG_FILES_PATH = $${_PRO_FILE_PWD_}/pkgconfig
    mkpath($$PKG_FILES_PATH)
    write_file($$PKG_FILES_PATH/$${DTK_MODULE_NAME}.pc, MULTI_PKG_CONTENT)|error("Aborting.")

    # DTKCORE 项目有部分其余cmake文件 建立对应的软连接保证其他项目能链接到
    equals(SRC_MODULE_ID, "dtkcore") {
        DTK_CMAKE_NAME=DtkCMake
        MULTI_CMAKE_DTKCONFIG_DIR=$$WORK_DIR/../cmake/$${DTK_CMAKE_NAME}$${VERSION_NUMBER}
        mkpath($$MULTI_CMAKE_DTKCONFIG_DIR)
        MULTI_CMAKE_DTKCONFIG_FILE = $$MULTI_CMAKE_DTKCONFIG_DIR/$${DTK_CMAKE_NAME}$${VERSION_NUMBER}Config.cmake
        system(ln -s ../$${DTK_CMAKE_NAME}/$${DTK_CMAKE_NAME}Config.cmake $${MULTI_CMAKE_DTKCONFIG_FILE})

        DTK_TOOLSDIR_NAME=DtkTools
        MULTI_DTK_TOOLSDIR=$$WORK_DIR/../cmake/$${DTK_TOOLSDIR_NAME}$${VERSION_NUMBER}
        mkpath($$MULTI_DTK_TOOLSDIR)
        DTK_SETTINGS_FILE_NAME = DtkSettingsToolsMacros
        MULTI_DTK_SETTINGS_FILE_PATH = $$MULTI_DTK_TOOLSDIR/$${DTK_SETTINGS_FILE_NAME}$${VERSION_NUMBER}.cmake
        MULTI_DTK_TOOLS_FILE_PATH = $$MULTI_DTK_TOOLSDIR/$${DTK_TOOLSDIR_NAME}$${VERSION_NUMBER}Config.cmake
        system(ln -s ../$${DTK_TOOLSDIR_NAME}/$${DTK_SETTINGS_FILE_NAME}.cmake $${MULTI_DTK_SETTINGS_FILE_PATH})
        system(ln -s ../$${DTK_TOOLSDIR_NAME}/$${DTK_TOOLSDIR_NAME}Config.cmake $${MULTI_DTK_TOOLS_FILE_PATH})
    }

    return (true)
}
